%h1 Lesson 003 [ More spawn/3, send/3, and receive ]

%p To gain a better understanding of spawn/3, send/3, and receive, I created a variety of demonstrations.

%p I started with the demo displayed below:

.syntax
  %pre
    =render 'lesson003a_d1'

%p When I study the above script I see that spawn/3 is called only once.

%p After it is called, I should get a process from UrMsgMod1.ur_rcv()

%p That process, running the function: ur_rcv/0, is a simple wrapper around two receive-blocks.

%p A bit of thought reveals that the Elixir receive-block is a somewhat primitive  feature.

%p It is designed to run only once.

%p It does not contain any kind of mechanism which might feel natural to a UI programmer who understands and uses event-loops.

%p
  %a(href='https://www.google.com/search?q=In+software+what+is+an+event+loop' target='x')
    https://www.google.com/search?q=In+software+what+is+an+event+loop
  
%p Also it will feel unnatural to a web programmer who wants to send an arbitrary number of requests to a web server.

%p When I see a function which goes silent after it responds to only one message, I should then understand that function to be primitive.

%h2 Happy-Path

%p The above script is written to support a "happy-path" scenario which has the script send only two messages and receive only two messages.

%p I ran the above script and collected output for you:

.syntax
  %pre
    =render 'lesson003b_d2'

%p That script ran error free and thus offers me an instructive moment.

%p But, sometimes problems can be educational.

%h2 UnHappy-Path

%p Next, I wrote a script to demonstrate an unhappy-path which sends two messages to a function which is written to receive only one message because it contains only one receive-block:


.syntax
  %pre
    =render 'lesson003c_d3'

%p I ran the above script and saw that it "hung"; it did not return my shell prompt.

%p I responded by typing ctrl-C on my keyboard until I saw the shell prompt again.

%p That session is displayed to you below:

.syntax
  %pre
    =render 'lesson003d_d3'

%p One simple way to make the script behave better is to rely on syntax which depends on a clause named: "after".

%p The script below displays the "after" clause:

.syntax
  %pre
    =render 'lesson003e_d4'

%p I ran the script and it behaved well.

%p That session is displayed to you below:

.syntax
  %pre
    =render 'lesson003f_d5'

%p Another way to enhance the script is to rely on recursion to force the function to receive messages until the sender is exhausted.

%p I recurse by first noting the name of the function which wraps the receive-block.

%p Then I write a call to that function into the receive-block.

%p If you are new to recursion, this script is a simple demo.

%p The script has a function named ur_rcv/0.

%p The last call, inside of ur_rcv/0, is a call to ur_rcv/0:

.syntax
  %pre
    =render 'lesson003g_d6'

%p I ran the script and it behaved well.

%p I captured that session. It is displayed below:

.syntax
  %pre
    =render 'lesson003h_d7'

So, the above output shows that recursion works well at enhancing a function to receive messages until the sender is exhausted.

%h1 Homework

%ul
  %li Write a script which has a module that holds two functions.
  %li Enhance the first function so it has a receive-block.
  %li Enhance the receive-block so it matches a tuple.
  %li For that tuple, write a function body which returns string: "hello".
  %li Enhance the tuple so it matches: {PID, some_string}
  %li Below the module, write a line which calls the first function.
  %li See if that works and then comment it out.
  %li Enhance the second function so it calls spawn/3.
  %li Enhance the call to spawn/3 so it spawns a call to the first function.
  %li Enhance the second function so it calls send/2.
  %li Enhance the send/2 call so it sends a message to first function process.
  
  