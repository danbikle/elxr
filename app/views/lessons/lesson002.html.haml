%h1 Lesson 002 [ Concurrency ]

%h2 Motivation

%p I am motivated to learn Elixir because I want to easily scale computing across a cluster.

%p If I want to run software on just one host, I'd use Python.

%p Elixir has nice syntax but that is not enough reason to spend hundreds of hours to learn it.

%p With that in mind, let us start Lesson 002.

%h2 elixirc

%p The elixir shell command can interpret a script and run the Elixir syntax inside.

%p The command can also execute a file which has been compiled from an Elixir script.

%p To demonstrate how to interpret an elixir script, I wrote the script listed below:

.syntax
  %pre
    =render 'lesson002a_i'

%p I asked Elixir to both interpret and run the above script:

.syntax
  %pre
    %code
      dan@h78:~/elxr/public/lesson002 $ elixir lesson002a.exs 
      Hello 1
      dan@h78:~/elxr/public/lesson002 $ 
      dan@h78:~/elxr/public/lesson002 $

%p So, that was easy.
%p That example was me operating Elixir like how I operate Python.

%p Next, I created a script called: "lesson002b.ex"

%p The ".ex" tells me that I should compile this script.

%p Elixir sees no difference between the exs-suffix and the ex-suffix, but I do.

%p The script is listed below:

.syntax
  %pre
    =render 'lesson002b_x'

%p Next, I used the elixirc shell command to compile lesson002b.ex:

.syntax
  %pre
    %code elixirc lesson002b.ex

%p Then, I used the elixir command to run compiled software:

.syntax
  %pre
    %code elixir -e "Elixir.SpawnMod.hello2"

%p It worked!

%p I captured a screen shot of the above steps for you:


.syntax
  %pre
    =render 'lesson002c_ss'




%h1 Homework

%ul
  %li Create a simple Elixir script and compile it.
  %li Create a simple .beam-file and run it.
  
  
