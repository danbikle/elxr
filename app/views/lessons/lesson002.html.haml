%h1 Lesson 002 [ spawn/3, send/3, and receive ]

%h2 Motivation

%p I am motivated to learn Elixir because I want to easily scale computing across a cluster.

%p A way to start down this path is to learn about: spawn/3, send/3, and receive.

%p If I want to run software on just one host, I'd use Python.

%p Elixir has nice syntax but that is not enough reason to spend hundreds of hours to learn it.

%p With that in mind, let us start Lesson 002.

%h2 elixir Coordination With elixirc

%p The elixir shell command can interpret a script and run the Elixir syntax inside.

%p The command can also execute a file which has been compiled from an Elixir script.

%p To demonstrate how to interpret an elixir script, I wrote the script listed below:

.syntax
  %pre
    =render 'lesson002a_i'

%p I asked Elixir to both interpret and run the above script:

.syntax
  %pre
    %code
      dan@h78:~/elxr/public/lesson002 $ elixir lesson002a.exs 
      Hello 1
      dan@h78:~/elxr/public/lesson002 $ 
      dan@h78:~/elxr/public/lesson002 $

%p So, that was easy.
%p That example was me operating Elixir like how I operate Python.

%p Next, I created a script called: "lesson002b.ex"

%p The ".ex" tells me that I should compile this script.

%p Elixir sees no difference between the exs-suffix and the ex-suffix, but I do.

%p The script is listed below:

.syntax
  %pre
    =render 'lesson002b_x'

%h2 elixirc

%p Next, I used the elixirc shell command to compile lesson002b.ex:

.syntax
  %pre
    %code elixirc lesson002b.ex

%p Then, I used the elixir command to run compiled software:

.syntax
  %pre
    %code elixir -e "Elixir.SpawnMod.hello2"

%p It worked!

%p I captured a screen shot of the above steps for you:

.syntax
  %pre
    =render 'lesson002c_ss'

%h2 spawn/3

%p Now that I know how to compile Elixir syntax and then run it, I should learn about spawn/3.

%p I should use spawn/3 when I want to spawn a process which is a skill I need when I scale Elixir across cores in a host or hosts in a cluster.

%p I wrote a simple script to demostrate how to combine the spawn/3 function with compiled Elixir software:

.syntax
  %pre
    =render 'lesson002d_spawn'

%p I ran the above script and captured output for you:

.syntax
  %pre
    =render 'lesson002d_spawnrun'

%h2 send/3

%p Elixir uses "message sending" as a way to distribute work across a cluster.
%p In the above demo I used spawn/3 to get a PID.

%p After I have a PID, I can send a message to the PID's process using send/3.

%p Here is some syntax which shows how to coordinate spawn/3 with send/3.

.syntax
  %pre
    =render 'lesson002e_spawn_send'
    
%p Notice that the comments at the top of the script give instructions.

%p I used those instructions to run the script.

%p I captured output for you:

.syntax
  %pre
    =render 'lesson002f_my_msg_mod'
    

%h1 Homework

%ul
  %li Write a simple Elixir script and compile it.
  %li Create a simple .beam-file and run it.
  %li Write a simple Elixir script which creates a PID.
  %li Write a simple Elixir script which creates a PID and sends a message to the PID.
  
  
  
