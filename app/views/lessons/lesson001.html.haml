%h1 Lesson 001 [ Install Elixir ]

%h2 Use Ubuntu

%p I recommend that you use Ubuntu 18.04 for both training and development.

%p Typically on Ubuntu I use a short account name like ann or dan.

%p On some of my other websites I run demos from the ann account.

%p On this site, the account name is often unstated because account name is not very important when you learn Elixir.

%p Ubuntu 18.04 will offer you a stable and consistent experience until 2023 or perhaps 2024.

%p I cannot say the same about Windows or Mac.

%p The product managers of Windows and Mac are motivated to frequently change the behavior of both the underlying OS and the UI on top of the OS.

%p Over the years after I became comfortable with some feature(s) of windows or Mac, it seemed that the feature(s) would change or disappear.

%p One attribute which seems consistent for each platform is that setting up a Development environment is usually a chore.

%p For me, setting up a Development environment on Ubuntu (10.04 onwards) has always been done with a simple set of Bash commands.

%p And, once I know those commands, they stay valid for years.

%p Now I avoid windows and Mac if possible.

%p Another fact to keep in mind is that after you become skilled at building Elixir applications, you will probably deploy them to a cluster of Linux hosts.

%p If you choose to use Ubuntu 18.04 hosts, then your development environment will be very similar to your production environment.

%p If code runs on your laptop, it should run in Production.

%h2 Ubuntu 18.04

%p I installed Elixir on Ubuntu 18.04.

%p It was easy.

%p I issued some Bash commands to do it:

.syntax
  %pre
    =render 'lesson001a_install'

%p If you want to install Elixir on Mac or windows, ask google; I don't know how.

%p After I installed Elixir, I checked the version with a Bash command:

.syntax
  %pre
    %code elixir -v

%hr/
%h2 .exs scripts

%p In my Desktop folder I wrote a script:

.syntax
  %pre
    %code # demo10.exs
    %code IO.puts "hello world"

%p I ran it and saw this:
.syntax
  %pre
    %code
      dan@h78:~/Desktop $ elixir demo10.exs 
      hello world
      dan@h78:~/Desktop $ 

%p Elixir is often called a "Functional Language" which means, in a simple sense, that functions are important.

%p Most languages require that I use parenthesis when I define or call functions.

%p Usually, Elixir allows me to omit parenthesis.

%h2 defmodule

%p I wrote a script with two functions inside one module.
%p One of the functions has parenthesis, but they are not necessary:

.syntax
  %pre
    =render 'lesson001b_demo11'

%p When I write Elixir scripts, I often put my functions in a module; you should too.

%p I ran the script and saw this:

.syntax
  %pre
    =render 'lesson001c_demo11'

%h2 fn

%p Elixir does allow me to create standalone functions; they don't need to be in a module.  An example of that is displayed below:

.syntax
  %pre
    =render 'lesson001d_demo11'

%p I ran the above script and saw this:

.syntax
  %pre
    =render 'lesson001e_demo11'
%p Notice that the syntax I use to create a function in a module is different than syntax for a standalone function.

%p I do not see this inconsistent pattern in other languages I work with like Python and Ruby.

%h2 Module.function/integer

%p When I describe functions in Elixir sometimes I refer to them like this:

%p "My favorite function is: IO.puts/1"

%p I write a 1 after the function name to tell you that IO.puts should take one argument.

%p It turns out that IO.puts can sometimes take two arguments.

%p So, I might write something like this:

%p "If I need to write to stderr, I can use IO.puts/2"

%p Here is an example of me calling String.slice/3:

.syntax
  %pre
    %code String.slice "helloworld", 1, 4

%p The above function, which accepts 3 arguments, should return 4 characters from a String.

%p The 1-value says to start counting at 1 character after 0 which is "e".

%p The above call should return the sub-String: "ello"

%p Elixir documentation has many examples of: Module.function/integer

%h2 Arity

%p Arity is the integer in: Module.function/integer

%p In the example below I show two functions with the same name but with different arity:

%ul
  %li Prt.prt3/0
  %li Prt.prt3/1

%p Elixir allows me to define function syntax for each:

.syntax
  %pre
    =render 'lesson001f_demo13'

%p I ran the above script and saw Prt3.prt3 adjust its behavior to arity:

.syntax
  %pre
    =render 'lesson001g_demo13'

%h1 Homework

%ul
  %li
    Get access to a host running Ubuntu 18.04:
    %ul
      %li
        %a(href='https://www.google.com/search?q=amazon+free+tier' target='x')
          https://www.google.com/search?q=amazon+free+tier
      %li
        %a(href='https://www.google.com/search?q=google+gcp+free+trial' target='x')
          https://www.google.com/search?q=google+gcp+free+trial
      %li
        %a(href='https://www.google.com/search?q=oracle+cloud+free+trial' target='x')
          https://www.google.com/search?q=oracle+cloud+free+trial
      %li
        %a(href='https://www.google.com/search?q=alibaba+cloud+free+trial' target='x')
          https://www.google.com/search?q=alibaba+cloud+free+trial
      %li
        %a(href='https://www.google.com/search?q=azure+cloud+free+trial' target='x')
          https://www.google.com/search?q=azure+cloud+free+trial
  %li Install Elixir on Ubuntu 18.04.
  %li Use Elixir to print your name.
  %li Use an Elixir function in a module to print your name.
  %li Use an Elixir function outside a module to print your name.
  %li Demonstrate a function in a module which adjusts its behavior to arity.
  
