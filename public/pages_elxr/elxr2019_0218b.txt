~/elxr/public/pages_elxr/elxr2019_0218b.txt


Foreword

I have always been fascinated with how changes in hardware
affect how we write software.

A couple of decades ago, memory was a very
limited resource.

It made sense back then for our software to take hold
of some piece of memory and mutate it as necessary.

However, allocating this memory and cleaning up after we no longer
needed it was a very error-prone task.

Some memory was never freed; sometimes memory was allocated over
another structure, leading to faults.

At the time, garbage collection was a known technique, but we needed
faster CPUs in order to use it in our daily software and free
ourselves from manual memory management.

That has happened—most of our languages are now garbage-collected.

Today, a similar phenomenon is happening.

Our CPUs are not getting anyfaster.

Instead, our computers get more and more cores.


This means new software needs to use as many cores as it can if it is
to maximize its use of the machine.

This conflicts directly with how we currently write software.

In fact, mutating our memory state actually slows down our software
when many cores are involved.

If you have four cores trying to access and manipulate the same piece
of memory, they can trip over each other.

This potentially corrupts memory unless some kind of synchronization
is applied.

I quickly learned that applying this synchronization is manual, error
prone, and tiresome, and it hurts performance.

I suddenly realized that’s not how I wanted to spend time writing
software in the next years of my career, and I set out to study new
languages and technologies.

It was on this quest that I fell in love with the Erlang virtual
machine and ecosystem.

In the Erlang VM, all code runs in tiny concurrent processes, each
with its own state.

Processes talk to each other via messages.

And since all communication happens by message-passing, exchanging
messages between different machines on the same network is handled
transparently by the VM, making it a perfect environment for building
distributed software!

However, I felt there was
still a gap in the Erlang ecosystem. I missedfirst-class support for
some of the features I find necessary in mydaily work—things such as
metaprogramming, polymorphism, andfirst-class tooling. From this need,
Elixir was born.Elixir is a pragmatic approach to functional
programming. It valuesits functional foundations and it focuses on
developerproductivity. Concurrency is the backbone of Elixir
software. Asgarbage collection once freed developers from the shackles
of memorymanagement, Elixir is here to free you from antiquated
concurrencymechanisms and bring you joy when writing concurrent code.A
functional programming language lets us think in terms of
functionsthat transform data. This transformation never mutates
data. Instead,each application of a function potentially creates a
new, freshversion of the data. This greatly reduces the need
fordata-synchronization mechanisms.Elixir also empowers developers by
providing macros. Elixir code isnothing more than data, and therefore
can be manipulated via macros likeany other value in the
language.Finally, object-oriented programmers will find many of
themechanisms they consider essential to writing good software, such
aspolymorphism, in Elixir.All this is powered by the Erlang VM, a
20-year-old virtual machinebuilt from scratch to support robust,
concurrent, and distributedsoftware. Elixir and the Erlang VM are
going to change how you writesoftware and make you ready to tackle the
upcoming years inprogramming.José ValimCreator of ElixirTenczynek,
Poland, October 2014
